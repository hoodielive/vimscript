VimScript (vimL)

  - Make vim do what you need or want it to do. 
  - Modify and extend vim.
  - Vim is a programmable editor.
  - Create new tools using this language.
  - Hook your tools into vim. 

Not all vim automation requires the full power of scripting. 

Abbreviations 
:abbreviate seq0 "expand this word"
:abbreviate can also take <C-I> commands as well 

- if you type :abbreviate or :ab  without an arg; you will get a list of the active abbreviations 
- to remove an abbreviation use :unabbreviate <theabbreviationmnemonic> 
- to remove all abbreviations use :abclear

caveats: abbreviations work in both insert mode and command mode. 
         To deactivate them type a literal <CTRL-V> before the abbreviation 
         For example: 
          :abbreviate ^V--c

better Options -> iabbrev and cabbrev where i (insert) and c (command)

Computed Abbreviations 
  - Don't have to be fixed 
    :iabbr <expr> TS strftime("%c") -> treat this exp as a peice of vimscript which works like unix stftime
      Whenever I type TS execute strftime("%c") (get appropriate timestamp)

      The time is TS (it will expand the time)
      The time is Fri 16 Nov 2018 07:49:02 PM EST

  - Or have PPP to the last yanked text: 
    :iabbr <expr> PPP getreg('') - what I yanked and is present in the register paste when I write PPP enter 

  - Have <^^> insert the contents of the preceding non-empty line: 
    :iabbr <expr> ^^ getline(search('\S\_.*n\_.*\%#','b'))

Maps
- creates a sequence that is expanded as soon as typed 
- a macro 
- Can specify maps for specific modes 
- Insert, Command-line, Normal, Visual, etc. 
- Typically placed in .vimrc

Insertion Maps 
- directly replacing an abbreviation 
- use instead of abbreviations 

:imap ww http:// 
:imap ee @gmail.com 
:imap ;b <blockquote><cite><CR></cite></blockquote><ESC>0

Now, if you type LHS.. 
...vim inserts RHS instead

- It expands automatically when the phrase is typed
- Know when to use abbreviations and when to use mappings 
- maps are better for insertion mode :imap <TAB> <C-N>
  - Tab now acts like Completion 

Normal Maps (normal mode)
- delete a paragraph dip (delete interior paragraph)
Put what if you wanted to delete hundreds of lines ? 

  :nmap X dip  #X does do something else, but you have to judge by sessions
  :nmap v <C-V> # get into Visual mode in normal mode
  :nmap <Space> <PageDown> - map the space bar to page down 
  :nmap <DOWN> :next<CR> (the down button goes to the next file)
  :nmap <UP>  :prev<CR> (the up button goes up a file)

CommandLine Maps 

  - :w ~/backup/latest<cr>

  add to .vimrc 
  :cmap wb :w ~/backup/latest<cr> # makes it permanent
  :cmap *** **/* # simplify subdirectory tours
    :next examples/**/*.c 

Other kinds of maps in addition to imap, nmap and cmap
 - omap
 - xmap
 - smap 
 - vmap 
 - map!
 - map
 - lmap 

:help :map-modes 

:vmap (visual mode map) - probably the most useful 

For example, fix <BS>/<DEL> in Visual block mode 
:vmap <BS> x 

Map expansions re-expanded, if neccessary 

Occasionally useful 
nmap X dip 
nmap Y XO[Paragraph deleted here]<ESC>:center<CR> # Pull from X mapping insert a Paragraph was deleted here, 
       go back to normal mode and put cursor to center and return

Can even be recursive: 
  :nmap X 0i# <ESC>jx # DONT DO THIS

  goto col 0 and insert a # character and a space and an escape and go down the line and do an x command again

Unremappable maps 
:nmap v <C-V>
:nmap <C-V> v 

# DAMN is wish that would work, i've always thought that block V and character v mappings needed to be swapped. 

But fret not, for there is a way - those other mappings would not work because vim will detect that you are 
doing some infinite recursions between two mappings. Rather use: 
nnoremap or inoremap instead

:nnoremap v <C-V>
:nnoremap <C-V> v 

:inoremap apo apok@somewhere
:inoremap fuk fuckoff@somewhere.com

Vim Scripting Basics 

- Maps are excellent facility until... 

  - you need something more complicated 
  - then they become tedious to construct 
  - and very hard to maintain 

  :vmap aa VGo1G

  :nmap X  0i#<SPACE><ESC>jX 

  :imap \p <p><CR></p><ESC>O<TAB>

  :nmap ;y :exe"syntax\<SPACE>"
           \.(exists('syntax_on')?'off':'enable')<CR>


So vim has its own scripting language 
:vmap <expr> aa Select_Entire_File() 
:nmap X :call Comment_To_EOF() 
:imap <expr> \p Insert_Balanced_Tags('p')
:nmap ;y :call Toggle_Syntax()

Vim Script is nearly fully featured:

  - variables 
  - expressions 
  - control structs 
  - built-in functions 
  - user-defined functions 
  - variadiac argument lists 
  - function references
  - lists
  - dictionaries 
  - I/O
  - pattern matching
  - buffer and window access and control 
  - exceptions 
  - OO
  - intergrated debugger 
  - etc., etc.

Intro most of the language:
:help vim-script-intro

http://vim.sourceforge.net/scripts 
https://www.ibm.com/developerworks/library/l-vim-script-1/

Convention: 

Five ways to execute Vim scripts 
Simplest: put them in '.vim' file 
..and then execute it with :source 

:source ./scriptfile.vim 


Or 

:source % (this file)

Or anywhere in the the vim runtime path 
$VIMRUNTIME 
:runtime scriptfile.vim (vim will look through this path and find the file and source it) typically ~/.vim 

Or 
:call MyBackupFunc(expand('%'), { 'all': 1, 'save': 'recent'})

Or, to save typing after the colon 
create a colon command: 

:command  SF source scriptfile.vim 
:command -nargs=1 MBF call MyBackupFunc(expand(<q-args>))


Even more useful is triggering a command form Normal mode...
Create a map to type it for you
:nmap ;s :source scriptfile.vim<CR>
:nmap \b :call MyBackupFunc(expand('%'), { 'all': 1 })<CR>

And for the very least effor 
Have vim invoke them automatically when event occurs (callback)

  :autocmd BufReadPost *.txt source scriptfile.vim # when you enter a buffer
  :autocmd WinLeave* call MyBackupFunc(expand('%')) # when you exit a window (even if you move your cursor)
  outside of the window!


All statements terminated by a newline:
  echo "Starting.."
  call Phase(1)
  call Phase(2)
  echo "Done"

To continue accross multiple lines., start next line with backslash (\)
    let full_name = 
    \ first_name . ' ' . middle_initial . ' ' . family_name 

To put 2 statements on one line, separate with vertical bar: 

  echo "Starting..." | call Phase(1) | call Phase(2) | echo "Done"

BTW, every colon command: 

  :set expandtabs 
  :%retab!
  :write 
  .. is a Vimmish statement 

  Leading colon is allow in Vim Script, but not required: 

    function! Tidy_and_save() 
        set expandtabs 
        %retab!
        write
    endfunction

Values 

Four built-in types: 
1. Strings 
2. Number 
3. List 
4. Dictionary
5. Floating points (7.4)

Corresponding literal value declarators: 
  Integer constant  999 999e01 0777 0xFACADE
  Metasyntaxed string "your \"text\":\x2D \<C-Z> and backslash \\"
  Literal string 'you''re text here: \not special'
  List [1,2,3]
  Dictionary { 'a': 1, 'b':2, 'c': '3PO' }

:help expr9

Comments 
  Start with quote (")

  Run to end-of-file: 

    " This is a comment 

  Can be place anywhere a string not expected 

  Combine comment and string 

  echo "This is a string " | "This is a comment 

Vim comments can be hard to detect 
So maybe add a more familar marker 

call Setup(0) # Arg means: interactive mode == false 
call Setup(0) # // Arg means: interactive mode == false 

To configure a more common commenting convention

Variables 

Use the 'let' keyword 
Vars can store numbers, strings, lists, dictionaries or function refs: 
Dynamically tyepd
Takes type from value and can't be changed

  let name = "larry"
  let height = 5'7
  let editors - ["VIM", "EMACS", "VSCODE"]
  let duration = { "VIM": "Best editor", "EMACS" : "Best editor too lol"}
  let task = function('Teach')

Value assignment also assigns varaible a (static) type: 
  Can't change that type once assigned 

  let duration = 90 " Error: rvalue is not a dictionary

You can be destroyed and recreated:
  unlet duration 
  let duration = 90 

Variable Scoping is Hungarian: 

Prefix Scope 
g:varname Global 
s:varname Local to the script file 
w:varname Local to current window
t:varname Local to current tab page
b:varname Local to current buffer
l:varname Local to current function 
a:varname Funcation argument 
v:varname Vim predefined variable 

NO prefix means var scoped to surrounding function or Global, if not a function (give a prefix)

Each scope name (b: w: : etc) also a symbol table 

So: 
  g:varname 

Is really just shorthand for: 
  g:['varname']


So you can manipulate entire var namespaces:
  "# Delete all variables belonging to current buffer ... 
      for varname in keys(b:)
          unlet b:[varname]
      endfor

Also pseudovariables for other kinds of containers: 

Pseudovar       aliasedto                      Example 
&varname        Vim option                     let &tabstop = 4
&l:varname      Local Vim option               let &l:matchpairs .= '<:>'
&g:varname      Global Vim option              let &g:digraph -!&g:digraph 
@varname        Vim register                   let @/ = ""
$varname        Environment variable           echo $HOME 

* like saying set 

Expressions
Assignment: = += -= .=
Ternary operator: condition ? expr : expr 
Logical && || 
Comporator:  == != > >= < <=
Pattern match: =~ !~
Referential equality is isnot 
Additive: + - . 
Multiplicative: * / %
Unary: ! + -

All Comporators do both string and numeric comparison 

Decides by examining arg types 

String comparisons honor ignorecase:
  but can be explicitly marked case-sensitive 
  or case-insensitive 
    (append a ?): 


  if name ==? 'Batman'
      echo "I'm Batman"
  elseif name ==# 'ee cummings'
      echo ":-( i died b4 sms cos i wd hv lvd txtng"
  endif

  for filenum in range(filecount)
    "Show progress
    echo (filenum / filecount * 100) . '%done'

    "Make Progress
    call process_file(filenum)
  endfor

  for result in result_list 
    let sum += result 
  endfor 
  echo "Sum was: " . sum


Control structures: 
  
  if condition 
    statements() 
  elseif other_condition 
    other_statements() 
  else
    still_other_statements() 
  endif 

  # While loop 
  while condition 
    statements() 
  endwhile 

  # For loop 
  for varname in list 
    statements() 
  endfor 

  Parallel iteration:
    
    for [var1, var2, etc] in listoflists 
      statements() 
    endfor

    For example:

    let g:words = { 1: "one ", 2: "two", 3: "many", 4: "lots" }

    for [key, val] in items(g:words)
      echo key . ': ' . val 
    endfor


   # short circuit while or for lopps 

    for number in list_of_numbers 
      if number < 0 
        continue  # go to next iteration 
      elseif number > 9 
        break # jump out of loop - exit loop completely
      endif 
      echo number 
    endfor


