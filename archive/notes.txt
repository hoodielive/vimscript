VimScript (vimL)

  - Make vim do what you need or want it to do. 
  - Modify and extend vim.
  - Vim is a programmable editor.
  - Create new tools using this language.
  - Hook your tools into vim. 

Not all vim automation requires the full power of scripting. 

Abbreviations 
:abbreviate seq0 "expand this word"
:abbreviate can also take <C-I> commands as well 

- if you type :abbreviate or :ab  without an arg; you will get a list of the active abbreviations 
- to remove an abbreviation use :unabbreviate <theabbreviationmnemonic> 
- to remove all abbreviations use :abclear

caveats: abbreviations work in both insert mode and command mode. 
         To deactivate them type a literal <CTRL-V> before the abbreviation 
         For example: 
          :abbreviate ^V--c

better Options -> iabbrev and cabbrev where i (insert) and c (command)

Computed Abbreviations 
  - Don't have to be fixed 
    :iabbr <expr> TS strftime("%c") -> treat this exp as a peice of vimscript which works like unix stftime
      Whenever I type TS execute strftime("%c") (get appropriate timestamp)

      The time is TS (it will expand the time)
      The time is Fri 16 Nov 2018 07:49:02 PM EST

  - Or have PPP to the last yanked text: 
    :iabbr <expr> PPP getreg('') - what I yanked and is present in the register paste when I write PPP enter 

  - Have <^^> insert the contents of the preceding non-empty line: 
    :iabbr <expr> ^^ getline(search('\S\_.*n\_.*\%#','b'))

Maps
- creates a sequence that is expanded as soon as typed 
- a macro 
- Can specify maps for specific modes 
- Insert, Command-line, Normal, Visual, etc. 
- Typically placed in .vimrc

Insertion Maps 
- directly replacing an abbreviation 
- use instead of abbreviations 

:imap ww http:// 
:imap ee @gmail.com 
:imap ;b <blockquote><cite><CR></cite></blockquote><ESC>0

Now, if you type LHS.. 
...vim inserts RHS instead

- It expands automatically when the phrase is typed
- Know when to use abbreviations and when to use mappings 
- maps are better for insertion mode :imap <TAB> <C-N>
  - Tab now acts like Completion 

Normal Maps (normal mode)
- delete a paragraph dip (delete interior paragraph)
Put what if you wanted to delete hundreds of lines ? 

  :nmap X dip  #X does do something else, but you have to judge by sessions
  :nmap v <C-V> # get into Visual mode in normal mode
  :nmap <Space> <PageDown> - map the space bar to page down 
  :nmap <DOWN> :next<CR> (the down button goes to the next file)
  :nmap <UP>  :prev<CR> (the up button goes up a file)

CommandLine Maps 

  - :w ~/backup/latest<cr>

  add to .vimrc 
  :cmap wb :w ~/backup/latest<cr> # makes it permanent
  :cmap *** **/* # simplify subdirectory tours
    :next examples/**/*.c 

Other kinds of maps in addition to imap, nmap and cmap
 - omap
 - xmap
 - smap 
 - vmap 
 - map!
 - map
 - lmap 

:help :map-modes 

:vmap (visual mode map) - probably the most useful 

For example, fix <BS>/<DEL> in Visual block mode 
:vmap <BS> x 

Map expansions re-expanded, if neccessary 

Occasionally useful 
nmap X dip 
nmap Y XO[Paragraph deleted here]<ESC>:center<CR> # Pull from X mapping insert a Paragraph was deleted here, 
       go back to normal mode and put cursor to center and return

Can even be recursive: 
  :nmap X 0i# <ESC>jx # DONT DO THIS

  goto col 0 and insert a # character and a space and an escape and go down the line and do an x command again

Unremappable maps 
:nmap v <C-V>
:nmap <C-V> v 

# DAMN is wish that would work, i've always thought that block V and character v mappings needed to be swapped. 

But fret not, for there is a way - those other mappings would not work because vim will detect that you are 
doing some infinite recursions between two mappings. Rather use: 
nnoremap or inoremap instead

:nnoremap v <C-V>
:nnoremap <C-V> v 

:inoremap apo apok@somewhere
:inoremap fuk fuckoff@somewhere.com

Vim Scripting Basics 

- Maps are excellent facility until... 

  - you need something more complicated 
  - then they become tedious to construct 
  - and very hard to maintain 

  :vmap aa VGo1G

  :nmap X  0i#<SPACE><ESC>jX 

  :imap \p <p><CR></p><ESC>O<TAB>

  :nmap ;y :exe"syntax\<SPACE>"
           \.(exists('syntax_on')?'off':'enable')<CR>


So vim has its own scripting language 
:vmap <expr> aa Select_Entire_File() 
:nmap X :call Comment_To_EOF() 
:imap <expr> \p Insert_Balanced_Tags('p')
:nmap ;y :call Toggle_Syntax()

Vim Script is nearly fully featured:

  - variables 
  - expressions 
  - control structs 
  - built-in functions 
  - user-defined functions 
  - variadiac argument lists 
  - function references
  - lists
  - dictionaries 
  - I/O
  - pattern matching
  - buffer and window access and control 
  - exceptions 
  - OO
  - intergrated debugger 
  - etc., etc.

Intro most of the language:
:help vim-script-intro

http://vim.sourceforge.net/scripts 
https://www.ibm.com/developerworks/library/l-vim-script-1/
