VimScript (vimL)

  - Make vim do what you need or want it to do. 
  - Modify and extend vim.
  - Vim is a programmable editor.
  - Create new tools using this language.
  - Hook your tools into vim. 

Not all vim automation requires the full power of scripting. 

Abbreviations 
:abbreviate seq0 "expand this word"
:abbreviate can also take <C-I> commands as well 

- if you type :abbreviate or :ab  without an arg; you will get a list of the active abbreviations 
- to remove an abbreviation use :unabbreviate <theabbreviationmnemonic> 
- to remove all abbreviations use :abclear

caveats: abbreviations work in both insert mode and command mode. 
         To deactivate them type a literal <CTRL-V> before the abbreviation 
         For example: 
          :abbreviate ^V--c

better Options -> iabbrev and cabbrev where i (insert) and c (command)

Computed Abbreviations 
  - Don't have to be fixed 
    :iabbr <expr> TS strftime("%c") -> treat this exp as a peice of vimscript which works like unix stftime
      Whenever I type TS execute strftime("%c") (get appropriate timestamp)

      The time is TS (it will expand the time)
      The time is Fri 16 Nov 2018 07:49:02 PM EST

  - Or have PPP to the last yanked text: 
    :iabbr <expr> PPP getreg('') - what I yanked and is present in the register paste when I write PPP enter 

  - Have <^^> insert the contents of the preceding non-empty line: 
    :iabbr <expr> ^^ getline(search('\S\_.*n\_.*\%#','b'))

Maps
- creates a sequence that is expanded as soon as typed 
- a macro 
- Can specify maps for specific modes 
- Insert, Command-line, Normal, Visual, etc. 
- Typically placed in .vimrc

Insertion Maps 
- directly replacing an abbreviation 
- use instead of abbreviations 

:imap ww http:// 
:imap ee @gmail.com 
:imap ;b <blockquote><cite><CR></cite></blockquote><ESC>0

Now, if you type LHS.. 
...vim inserts RHS instead

- It expands automatically when the phrase is typed
- Know when to use abbreviations and when to use mappings 
- maps are better for insertion mode :imap <TAB> <C-N>
  - Tab now acts like Completion 

Normal Maps (normal mode)
- delete a paragraph dip (delete interior paragraph)
Put what if you wanted to delete hundreds of lines ? 

  :nmap X dip  #X does do something else, but you have to judge by sessions
  :nmap v <C-V> # get into Visual mode in normal mode
  :nmap <Space> <PageDown> - map the space bar to page down 
  :nmap <DOWN> :next<CR> (the down button goes to the next file)
  :nmap <UP>  :prev<CR> (the up button goes up a file)

CommandLine Maps 

  - :w ~/backup/latest<cr>

  add to .vimrc 
  :cmap wb :w ~/backup/latest<cr> # makes it permanent
  :cmap *** **/* # simplify subdirectory tours
    :next examples/**/*.c 

Other kinds of maps in addition to imap, nmap and cmap
 - omap
 - xmap
 - smap 
 - vmap 
 - map!
 - map
 - lmap 

:help :map-modes 

:vmap (visual mode map) - probably the most useful 

For example, fix <BS>/<DEL> in Visual block mode 
:vmap <BS> x 
